import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt

import streamlit as st
from flask import Flask, request, jsonify
from pyngrok import ngrok

# Generate synthetic data
def generate_synthetic_data(num_samples=1000, board_size=(10, 10), num_components=5):
    data = []
    labels = []
    for _ in range(num_samples):
        components = np.random.randint(0, board_size[0], (num_components, 2))
        label = sorted(components, key=lambda x: x[0] + x[1])  # Simple heuristic
        data.append(components.flatten())
        labels.append(np.array(label).flatten())
    return np.array(data, dtype=np.float32), np.array(labels, dtype=np.float32)

# Generate dataset
X_train, y_train = generate_synthetic_data()
X_train_tensor = torch.tensor(X_train).float()  # Fix: Ensure float type
y_train_tensor = torch.tensor(y_train).float()

# Define AI model
class LayoutNN(nn.Module):
    def __init__(self, input_size, output_size):
        super(LayoutNN, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, output_size)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

# Initialize and train model
model = LayoutNN(input_size=10, output_size=10)
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

def train_model(model, X, y, epochs=100):
    for epoch in range(epochs):
        optimizer.zero_grad()
        outputs = model(X)
        loss = criterion(outputs, y)
        loss.backward()
        optimizer.step()
        if epoch % 10 == 0:
            print(f'Epoch {epoch}, Loss: {loss.item()}')

train_model(model, X_train_tensor, y_train_tensor)

with open("app.py", "w") as f:
    f.write("""
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.title("AI-Generated Circuit Board Layout")

# User inputs
board_size = st.slider("Board Size", 5, 20, 10)
num_components = st.slider("Number of Components", 2, 10, 5)

# Generate random components
components = np.random.randint(0, board_size, (num_components, 2))

# Display generated layout
fig, ax = plt.subplots()
ax.set_xlim(0, board_size)
ax.set_ylim(0, board_size)
ax.scatter(components[:, 0], components[:, 1], c="red", label="Components")
ax.legend()
st.pyplot(fig)
""")

# Visualization
def visualize_layout(board_size, components):
    plt.figure(figsize=(5, 5))
    plt.xlim(0, board_size[0])
    plt.ylim(0, board_size[1])
    for i, (x, y) in enumerate(components):
        plt.scatter(x, y, label=f'Comp {i+1}')
    plt.legend()
    plt.show()


# Flask app for deployment
app = Flask(__name__)

@app.route('/')
def home():
    return "Flask is running successfully in Colab!"

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json['input']
    input_tensor = torch.tensor([data], dtype=torch.float32)
    with torch.no_grad():
        prediction = model(input_tensor).numpy().tolist()
    return jsonify({'prediction': prediction})


# Start ngrok and print the public URL
public_url = ngrok.connect(5000)
print(f"Public URL: {public_url}")

if __name__ == '__main__':
    app.run(port=5000)











import os
from pyngrok import ngrok

# Write the Streamlit app to a file
with open("app.py", "w") as f:
    f.write("""
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.title("AI-Generated Circuit Board Layout")

# User inputs
board_size = st.slider("Board Size", 5, 20, 10)
num_components = st.slider("Number of Components", 2, 10, 5)

# Generate random components
components = np.random.randint(0, board_size, (num_components, 2))

# Display generated layout
fig, ax = plt.subplots()
ax.set_xlim(0, board_size)
ax.set_ylim(0, board_size)
ax.scatter(components[:, 0], components[:, 1], c="red", label="Components")
ax.legend()
st.pyplot(fig)
""")

# Start Streamlit in the background
os.system("streamlit run app.py &")

# Open an ngrok tunnel on port 8501
public_url = ngrok.connect(8501).public_url
print(f"Public URL: {public_url}")

